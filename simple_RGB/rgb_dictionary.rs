use std::collections::HashMap; // Dictionaries

// pub fn get_alpha_dictionary() -> HashMap<char, (i32, i32)> {
//     HashMap::from([ // defining the dictionary as (char, integer, integer), and asserting to create a hashmap from the following...
//         ('a', (2, 1)), ('b', (2, 2)), ('c', (2, 3)), ('d', (2, 4)), ('e', (2, 5)),
//         ('f', (2, -1)), ('g', (2, -2)), ('h', (2, -3)), ('i', (2, -4)), ('j', (2, -5)),
//         ('k', (4, 1)), ('l', (4, 2)), ('m', (4, 3)), ('n', (4, 4)), ('o', (4, 5)),
//         ('p', (4, -1)), ('q', (4, -2)), ('r', (4, -3)), ('s', (4, -4)), ('t', (4, -5)),
//         ('u', (6, 1)), ('v', (6, 2)), ('w', (6, 3)), ('x', (6, 4)), ('y', (6, 5)), ('z', (6, -1)),
//         ('!', (6, -2)), ('.', (6, -3)), (',', (6, -4)), ('?', (6, -5)),
//         ('\n', (8, 1)), (' ', (8, 2)),
//     ]) // no semi-colon, return automatically the hashmap
// }

pub fn get_rgb_dictionary() -> HashMap<char, (i32, i32)> {
    HashMap::from([
        ('a', (1, 0)), ('b', (2, 0)), ('c', (3, 0)), ('d', (4, 0)), ('e', (5, 0)),
        ('f', (6, 0)), ('g', (7, 0)), ('h', (8, 0)), ('i', (9, 0)), ('j', (10, 0)),
        ('k', (11, 0)), ('l', (12, 0)), ('m', (13, 0)), ('n', (14, 0)), ('o', (15, 0)),
        ('p', (16, 0)), ('q', (17, 0)), ('r', (18, 0)), ('s', (19, 0)), ('t', (20, 0)),
        ('u', (21, 0)), ('v', (22, 0)), ('w', (23, 0)), ('x', (24, 0)), ('y', (25, 0)), ('z', (26, 0)),
        ('!', (27, 0)), ('.', (28, 0)), (',', (29, 0)), ('?', (30, 0)),
        ('\n', (31, 0)), (' ', (32, 0)),
    ])
}
